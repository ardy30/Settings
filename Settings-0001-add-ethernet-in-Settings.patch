diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index 3d538a1..c661a44 100755
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -453,6 +453,35 @@
                 android:resource="@id/wireless_settings" />
         </activity-alias>
 
+    <!--$_rbox_$_modify_$_blb_20150107: add for ethernet-->
+	 <!--$_rbox_$_modify_$_begin-->
+         <activity android:name="Settings$EthernetSettingsActivity"
+                android:label="@string/ethernet_settings_title"
+                android:taskAffinity="">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.VOICE_LAUNCH" />
+                <category android:name="com.android.settings.SHORTCUT" />
+            </intent-filter>
+            <meta-data android:name="com.android.settings.FRAGMENT_CLASS"
+                android:value="com.android.settings.EthernetSettings" />
+            <meta-data android:name="com.android.settings.TOP_LEVEL_HEADER_ID"
+                android:resource="@id/wireless_settings" />
+        </activity>
+        <!-- Keep compatibility with old shortcuts. -->
+         <activity-alias android:name=".EthernetSettings"
+                android:label="@string/ethernet_settings"
+                android:targetActivity="Settings$EthernetSettingsActivity"
+                android:exported="true">
+            <meta-data android:name="com.android.settings.FRAGMENT_CLASS"
+                android:value="com.android.settings.EthernetSettings" />
+            <meta-data android:name="com.android.settings.TOP_LEVEL_HEADER_ID"
+                android:resource="@id/wireless_settings" />
+         </activity-alias>
+ 
+	  <!--$_rbox_$_modify_$_end-->
+	 <!--$_rbox_$_modify_$_chenzhi_20120309-->
         <activity android:name="Settings$WifiP2pSettingsActivity"
                 android:taskAffinity="com.android.settings"
                 android:parentActivityName="Settings$WifiSettingsActivity">
diff --git a/res/layout/static_ip_dialog.xml b/res/layout/static_ip_dialog.xml
new file mode 100755
index 0000000..8e7bef0
--- /dev/null
+++ b/res/layout/static_ip_dialog.xml
@@ -0,0 +1,156 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2010 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    android:fadeScrollbars="false" >
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="vertical"
+        android:paddingBottom="8dip" >
+
+        <LinearLayout
+            android:id="@+id/wifi_advanced_fields"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:orientation="vertical" >
+
+            <LinearLayout
+                android:id="@+id/proxy_fields"
+                style="@style/wifi_section"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content" >
+
+                <LinearLayout
+                    android:id="@+id/staticip"
+                    style="@style/wifi_section"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content" >
+
+                    <LinearLayout
+                        style="@style/wifi_item"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content" >
+
+                        <TextView
+                            style="@style/wifi_item_label"
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:text="@string/wifi_ip_address" />
+
+                        <EditText
+                            android:id="@+id/ipaddress"
+                            style="@style/wifi_item_edit_content"
+                            android:layout_width="match_parent"
+                            android:layout_height="wrap_content"
+                            android:hint="@string/wifi_ip_address_hint"
+                            android:inputType="textNoSuggestions"
+                            android:singleLine="true" />
+                    </LinearLayout>
+
+                    <LinearLayout
+                        style="@style/wifi_item"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content" >
+
+                        <TextView
+                            style="@style/wifi_item_label"
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:text="@string/wifi_gateway" />
+
+                        <EditText
+                            android:id="@+id/gateway"
+                            style="@style/wifi_item_edit_content"
+                            android:layout_width="match_parent"
+                            android:layout_height="wrap_content"
+                            android:hint="@string/wifi_gateway_hint"
+                            android:inputType="textNoSuggestions"
+                            android:singleLine="true" />
+                    </LinearLayout>
+
+                    <LinearLayout
+                        style="@style/wifi_item"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content" >
+
+                        <TextView
+                            style="@style/wifi_item_label"
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:text="@string/ethernet_netmask" />
+
+                        <EditText
+                            android:id="@+id/network_prefix_length"
+                            style="@style/wifi_item_edit_content"
+                            android:layout_width="match_parent"
+                            android:layout_height="wrap_content"
+                            android:hint="@string/ethernet_netmask_hint"
+                            android:inputType="textNoSuggestions"
+                            android:singleLine="true" />
+                    </LinearLayout>
+
+                    <LinearLayout
+                        style="@style/wifi_item"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content" >
+
+                        <TextView
+                            style="@style/wifi_item_label"
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:text="@string/wifi_dns1" />
+
+                        <EditText
+                            android:id="@+id/dns1"
+                            style="@style/wifi_item_edit_content"
+                            android:layout_width="match_parent"
+                            android:layout_height="wrap_content"
+                            android:hint="@string/wifi_dns1_hint"
+                            android:inputType="textNoSuggestions"
+                            android:singleLine="true" />
+                    </LinearLayout>
+
+                    <LinearLayout
+                        style="@style/wifi_item"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content" >
+
+                        <TextView
+                            style="@style/wifi_item_label"
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:text="@string/wifi_dns2" />
+
+                        <EditText
+                            android:id="@+id/dns2"
+                            style="@style/wifi_item_edit_content"
+                            android:layout_width="match_parent"
+                            android:layout_height="wrap_content"
+                            android:hint="@string/wifi_dns2_hint"
+                            android:inputType="textNoSuggestions"
+                            android:singleLine="true" />
+                    </LinearLayout>
+                </LinearLayout>
+            </LinearLayout>
+        </LinearLayout>
+    </LinearLayout>
+
+</ScrollView>
diff --git a/res/values-zh-rCN/strings_ethernet.xml b/res/values-zh-rCN/strings_ethernet.xml
new file mode 100755
index 0000000..c36cbcb
--- /dev/null
+++ b/res/values-zh-rCN/strings_ethernet.xml
@@ -0,0 +1,45 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <!-- Begin ethernet String -->
+    <string name="ethernet_settings_title">"以太网"</string>
+    <string name="ethernet_settings">以太网</string>
+    <string name="ethernet_connect">连接</string>
+    <string name="ethernet_cancel">取消</string>
+    <!--Wireless controls screen, settings summary for the item tot ake you to the ethernet settings screen -->
+    <string name="ethernet_settings_summary">设置以太网</string>
+    <!-- ethernet hw address  -->
+    <string name="ethernet_hw_addr">MAC地址</string>
+    <!-- ethernet ip address  -->
+    <string name="ethernet_ip_addr">IP地址</string>
+    <!-- ethernet netmask  -->
+    <string name="ethernet_netmask">子网掩码</string>
+    <!-- ethernet gateway  -->
+    <string name="ethernet_gateway">网关</string>
+    <!-- ethernet dns1  -->
+    <string name="ethernet_dns1">dns1</string>
+    <!-- ethernet dns2 -->
+    <string name="ethernet_dns2">dns2</string>
+    <string name="category_ethernet">Static IP Setttings</string>
+    <string name="usedhcp">动态获取</string>
+    <string name="usestatic">静态地址</string>
+    <string name="ethernet_use_static_ip">静态IP地址</string>
+    <string name="ethernet_ip_address">IP地址</string>
+    <string name="staticip_save">保存</string>
+    <string name="staticip_cancel">取消</string>
+    <string name="str_ok">确定</string>
+    <string name="str_cancel">取消</string>
+    <string name="str_about">Important</string>
+    <string name="str_mesg">Whether save Settings?</string>
+    <string name="save_failed">保存失败!</string>
+    <string name="ethernet_ip_settings_invalid_ip">请输入IP地址.</string>
+    <string name="eth_ip_settings_please_complete_settings">请填写完整!</string>
+    <string name="ethernet_quick_toggle_title">以太网</string>
+    <!-- Ethernet settings check box summary for turning on ethernet -->
+    <string name="ethernet_quick_toggle_summary_off">已关闭</string>
+    <!--Used as title on second screen after selecting Ethernet settings -->
+    <string name="ethernet_quick_toggle_summary_on">已启用</string>
+    <!--Used as title on second screen after selecting Ethernet settings -->
+    <string name="ethernet_mode_title">以太网模式</string>
+    <string name="ethernet_info_getting">"正在获取IP地址..."</string>
+    <!-- End ethernet -->
+</resources>
diff --git a/res/values-zh-rHK/strings_ethernet.xml b/res/values-zh-rHK/strings_ethernet.xml
new file mode 100755
index 0000000..0de7657
--- /dev/null
+++ b/res/values-zh-rHK/strings_ethernet.xml
@@ -0,0 +1,45 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <!-- Begin ethernet String -->
+    <string name="ethernet_settings_title">"以太網"</string>
+    <string name="ethernet_settings">以太網</string>
+    <string name="ethernet_connect">連接</string>
+    <string name="ethernet_cancel">取消</string>
+    <!--Wireless controls screen, settings summary for the item tot ake you to the ethernet settings screen -->
+    <string name="ethernet_settings_summary">設置以太網</string>
+    <!-- ethernet hw address  -->
+    <string name="ethernet_hw_addr">MAC地址</string>
+    <!-- ethernet ip address  -->
+    <string name="ethernet_ip_addr">IP地址</string>
+    <!-- ethernet netmask  -->
+    <string name="ethernet_netmask">子網掩碼</string>
+    <!-- ethernet gateway  -->
+    <string name="ethernet_gateway">網關</string>
+    <!-- ethernet dns1  -->
+    <string name="ethernet_dns1">dns1</string>
+    <!-- ethernet dns2 -->
+    <string name="ethernet_dns2">dns2</string>
+    <string name="category_ethernet">Static IP Setttings</string>
+    <string name="usedhcp">動態獲取</string>
+    <string name="usestatic">靜態地址</string>
+    <string name="ethernet_use_static_ip">靜態IP地址</string>
+    <string name="ethernet_ip_address">IP地址</string>
+    <string name="staticip_save">保存</string>
+    <string name="staticip_cancel">取消</string>
+    <string name="str_ok">確定</string>
+    <string name="str_cancel">取消</string>
+    <string name="str_about">Important</string>
+    <string name="str_mesg">Whether save Settings?</string>
+    <string name="save_failed">保存失敗!</string>
+    <string name="ethernet_ip_settings_invalid_ip">請輸入IP地址.</string>
+    <string name="eth_ip_settings_please_complete_settings">請填寫完整!</string>
+    <string name="ethernet_quick_toggle_title">以太網</string>
+    <!-- Ethernet settings check box summary for turning on ethernet -->
+    <string name="ethernet_quick_toggle_summary_off">已關閉</string>
+    <!--Used as title on second screen after selecting Ethernet settings -->
+    <string name="ethernet_quick_toggle_summary_on">已啟用</string>
+    <!--Used as title on second screen after selecting Ethernet settings -->
+    <string name="ethernet_mode_title">以太網模式</string>
+    <string name="ethernet_info_getting">"正在獲取IP地址..."</string>
+    <!-- End ethernet -->
+</resources>
diff --git a/res/values-zh-rTW/strings_ethernet.xml b/res/values-zh-rTW/strings_ethernet.xml
new file mode 100755
index 0000000..0de7657
--- /dev/null
+++ b/res/values-zh-rTW/strings_ethernet.xml
@@ -0,0 +1,45 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <!-- Begin ethernet String -->
+    <string name="ethernet_settings_title">"以太網"</string>
+    <string name="ethernet_settings">以太網</string>
+    <string name="ethernet_connect">連接</string>
+    <string name="ethernet_cancel">取消</string>
+    <!--Wireless controls screen, settings summary for the item tot ake you to the ethernet settings screen -->
+    <string name="ethernet_settings_summary">設置以太網</string>
+    <!-- ethernet hw address  -->
+    <string name="ethernet_hw_addr">MAC地址</string>
+    <!-- ethernet ip address  -->
+    <string name="ethernet_ip_addr">IP地址</string>
+    <!-- ethernet netmask  -->
+    <string name="ethernet_netmask">子網掩碼</string>
+    <!-- ethernet gateway  -->
+    <string name="ethernet_gateway">網關</string>
+    <!-- ethernet dns1  -->
+    <string name="ethernet_dns1">dns1</string>
+    <!-- ethernet dns2 -->
+    <string name="ethernet_dns2">dns2</string>
+    <string name="category_ethernet">Static IP Setttings</string>
+    <string name="usedhcp">動態獲取</string>
+    <string name="usestatic">靜態地址</string>
+    <string name="ethernet_use_static_ip">靜態IP地址</string>
+    <string name="ethernet_ip_address">IP地址</string>
+    <string name="staticip_save">保存</string>
+    <string name="staticip_cancel">取消</string>
+    <string name="str_ok">確定</string>
+    <string name="str_cancel">取消</string>
+    <string name="str_about">Important</string>
+    <string name="str_mesg">Whether save Settings?</string>
+    <string name="save_failed">保存失敗!</string>
+    <string name="ethernet_ip_settings_invalid_ip">請輸入IP地址.</string>
+    <string name="eth_ip_settings_please_complete_settings">請填寫完整!</string>
+    <string name="ethernet_quick_toggle_title">以太網</string>
+    <!-- Ethernet settings check box summary for turning on ethernet -->
+    <string name="ethernet_quick_toggle_summary_off">已關閉</string>
+    <!--Used as title on second screen after selecting Ethernet settings -->
+    <string name="ethernet_quick_toggle_summary_on">已啟用</string>
+    <!--Used as title on second screen after selecting Ethernet settings -->
+    <string name="ethernet_mode_title">以太網模式</string>
+    <string name="ethernet_info_getting">"正在獲取IP地址..."</string>
+    <!-- End ethernet -->
+</resources>
diff --git a/res/values/arrays_ethernet.xml b/res/values/arrays_ethernet.xml
new file mode 100755
index 0000000..8dfae2e
--- /dev/null
+++ b/res/values/arrays_ethernet.xml
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <!--ethernet mode select -->
+    <string-array name="ethernet_mode_location">
+       <item>@string/usestatic</item>
+       <item>@string/usedhcp</item>
+    </string-array>
+   <string-array name="ethernet_mode_values">
+      <item>StaticIP</item>
+      <item>DHCP</item>
+   </string-array>
+</resources>
diff --git a/res/values/strings_ethernet.xml b/res/values/strings_ethernet.xml
new file mode 100755
index 0000000..2875d63
--- /dev/null
+++ b/res/values/strings_ethernet.xml
@@ -0,0 +1,46 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <!-- Begin ethernet String -->
+    <string name="ethernet_settings_title" >"Ethernet"</string>
+    <string name="ethernet_netmask_hint" translatable="false"> 255.255.255.0</string>
+    <string name="ethernet_settings">Ethernet</string>
+    <string name="ethernet_connect">Connect</string>
+    <string name="ethernet_cancel">Cancel</string>
+    <!--Wireless controls screen, settings summary for the item tot ake you to the ethernet settings screen -->
+    <string name="ethernet_settings_summary">Manager ethernet</string>
+    <!-- ethernet hw address  -->
+    <string name="ethernet_hw_addr">MAC</string>
+    <!-- ethernet ip address  -->
+    <string name="ethernet_ip_addr">IP Address</string>
+    <!-- ethernet netmask  -->
+    <string name="ethernet_netmask">Netmask</string>
+    <!-- ethernet gateway  -->
+    <string name="ethernet_gateway">Gateway</string>
+    <!-- ethernet dns1  -->
+    <string name="ethernet_dns1">Primary DNS</string>
+    <!-- ethernet dns2 -->
+    <string name="ethernet_dns2">Second DNS</string>
+    <string name="category_ethernet">Static IP Setttings</string>
+    <string name="usedhcp">dhcp</string>
+    <string name="usestatic">static</string> 
+    <string name="ethernet_use_static_ip">Use static IP</string>
+    <string name="ethernet_ip_address">IP Address</string>
+    <string name="staticip_save">Save</string>   
+    <string name="staticip_cancel">Cancel</string>
+    <string name="str_ok">OK</string>  
+    <string name="str_cancel">Cancel</string>
+    <string name="str_about">Important</string>
+    <string name="str_mesg">Whether save Settings?</string>
+    <string name="save_failed">Save failed!</string>
+    <string name="ethernet_ip_settings_invalid_ip">Please type a valid IP address.</string>
+    <string name="eth_ip_settings_please_complete_settings">Please give complete static IP settings!</string>
+    <string name="ethernet_quick_toggle_title">Ethernet</string>
+    <!-- Ethernet settings check box summary for turning on ethernet -->
+    <string name="ethernet_quick_toggle_summary_off">Ethernet is disabled</string>
+    <!--Used as title on second screen after selecting Ethernet settings -->
+    <string name="ethernet_quick_toggle_summary_on">Ethernet is enabled</string>
+    <!--Used as title on second screen after selecting Ethernet settings -->
+    <string name="ethernet_mode_title">Ethernet IP mode</string>
+    <string name="ethernet_info_getting">"Getting IP info..."</string>
+    <!-- End ethernet -->
+</resources>
diff --git a/res/xml/ethernet_settings.xml b/res/xml/ethernet_settings.xml
new file mode 100755
index 0000000..df4b10f
--- /dev/null
+++ b/res/xml/ethernet_settings.xml
@@ -0,0 +1,71 @@
+<?xml version="1.0" encoding="utf-8"?>
+<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:settings="http://schemas.android.com/apk/res/com.android.settings"
+    android:title="@string/ethernet_settings" >
+
+    <!-- $_rbox_$_modify_$_lijiehong: change to support bluetooth checkbox -->
+
+    <SwitchPreference
+        android:key="ethernet"
+        android:title="@string/ethernet_quick_toggle_title"
+        android:summaryOff="@string/ethernet_quick_toggle_summary_off"
+        android:summaryOn="@string/ethernet_quick_toggle_summary_on"
+        android:persistent="false"
+        android:disableDependentsState="true" />
+<!--    
+    <Preference
+        style="?android:preferenceInformationStyle"
+        android:key="ethernet_hw_addr"
+        android:summary="@string/device_info_default"
+        android:title="@string/ethernet_hw_addr" />
+-->
+    <!-- ethernet ip address -->
+    <Preference
+        style="?android:preferenceInformationStyle"
+        android:key="ethernet_ip_addr"
+        android:summary="@string/device_info_default"
+        android:title="@string/ethernet_ip_addr" />
+
+    <!-- ethernet netmask -->
+    <Preference
+        style="?android:preferenceInformationStyle"
+        android:key="ethernet_netmask"
+        android:summary="@string/device_info_default"
+        android:title="@string/ethernet_netmask" />
+
+    <!-- ethernet gateway -->
+    <Preference
+        style="?android:preferenceInformationStyle"
+        android:key="ethernet_gateway"
+        android:summary="@string/device_info_default"
+        android:title="@string/ethernet_gateway" />
+
+    <!-- ethernet dns1 -->
+    <Preference
+        style="?android:preferenceInformationStyle"
+        android:key="ethernet_dns1"
+        android:summary="@string/device_info_default"
+        android:title="@string/ethernet_dns1" />
+
+    <!-- ethernet dns2 -->
+    <Preference
+        style="?android:preferenceInformationStyle"
+        android:key="ethernet_dns2"
+        android:summary="@string/device_info_default"
+        android:title="@string/ethernet_dns2" />
+   <ListPreference
+            android:entries="@array/ethernet_mode_location"
+            android:entryValues="@array/ethernet_mode_values"
+            android:key="ethernet_mode_select"
+            android:persistent="true"
+            android:title="@string/ethernet_mode_title"
+       />
+ <!--  
+    <CheckBoxPreference
+        android:key="static_ethernet"
+        android:title="@string/usestatic" />
+    <CheckBoxPreference
+        android:key="dhcp_ethernet"
+        android:title="@string/usedhcp" />
+  -->    
+</PreferenceScreen>
diff --git a/res/xml/wireless_settings.xml b/res/xml/wireless_settings.xml
index f08de5e..5bb4dad 100644
--- a/res/xml/wireless_settings.xml
+++ b/res/xml/wireless_settings.xml
@@ -47,6 +47,11 @@
         android:title="@string/tether_settings_title_all" />
 
     <PreferenceScreen
+        android:fragment="com.android.settings.EthernetSettings"
+        android:key="ethernet_settings"
+        android:title="@string/ethernet_settings_title" /> 
+ 
+    <PreferenceScreen
         android:fragment="com.android.settings.vpn2.VpnSettings"
         android:key="vpn_settings"
         android:title="@string/vpn_settings_title" />
diff --git a/src/com/android/settings/DataUsageSummary.java b/src/com/android/settings/DataUsageSummary.java
index 135328b..568874d 100644
--- a/src/com/android/settings/DataUsageSummary.java
+++ b/src/com/android/settings/DataUsageSummary.java
@@ -903,7 +903,7 @@ public class DataUsageSummary extends HighlightingFragment implements Indexable
         mBinding = false;
 
         int seriesColor = context.getColor(R.color.sim_noitification);
-        if (mCurrentTab != null && mCurrentTab.length() > TAB_MOBILE.length() ){
+        if (mCurrentTab != null && mCurrentTab.length() > TAB_MOBILE.length() && ! com.android.settings.Utils.isWifiOnly(context)){
             final int slotId = Integer.parseInt(mCurrentTab.substring(TAB_MOBILE.length(),
                     mCurrentTab.length()));
             final SubscriptionInfo sir = mSubscriptionManager
diff --git a/src/com/android/settings/EthernetSettings.java b/src/com/android/settings/EthernetSettings.java
new file mode 100755
index 0000000..4782225
--- /dev/null
+++ b/src/com/android/settings/EthernetSettings.java
@@ -0,0 +1,564 @@
+/*
+ * Copyright (C) 2009 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.android.settings;
+
+import com.android.settings.R;
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.app.Dialog;
+import android.app.admin.DevicePolicyManager;
+import android.content.ActivityNotFoundException;
+import android.content.BroadcastReceiver;
+import android.content.ComponentName;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.pm.PackageManager;
+import android.content.res.Resources;
+import android.net.ConnectivityManager;
+import android.net.NetworkInfo;
+import android.net.Uri;
+import android.os.Bundle;
+import android.os.SystemProperties;
+import android.os.UserHandle;
+import android.os.UserManager;
+import android.preference.CheckBoxPreference;
+import android.preference.Preference;
+import android.preference.Preference.OnPreferenceChangeListener;
+import android.preference.PreferenceScreen;
+import android.preference.SwitchPreference;
+import android.provider.SearchIndexableResource;
+import android.provider.Settings;
+import android.telephony.TelephonyManager;
+import android.text.TextUtils;
+import android.util.Log;
+import android.content.Intent;
+
+import java.util.regex.Pattern;
+import java.lang.Integer;
+import java.net.InetAddress;
+import java.net.Inet4Address;
+import java.util.Iterator;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.List;
+import android.preference.Preference.OnPreferenceChangeListener;
+import com.android.settings.SettingsPreferenceFragment.SettingsDialogFragment;
+
+/*for 5.0*/
+import android.net.EthernetManager;
+import android.net.IpConfiguration;
+import android.net.IpConfiguration.IpAssignment;
+import android.net.IpConfiguration.ProxySettings;
+import android.net.wifi.SupplicantState;
+import android.net.wifi.WifiInfo;
+import android.net.wifi.WifiManager;
+import android.net.StaticIpConfiguration;
+import android.net.NetworkUtils;
+import android.net.LinkAddress;
+import android.net.LinkProperties;
+import android.preference.ListPreference;
+
+import com.android.internal.logging.MetricsLogger;
+
+import com.android.settings.ethernet_static_ip_dialog;
+
+public class EthernetSettings extends SettingsPreferenceFragment 
+			implements DialogInterface.OnClickListener ,OnPreferenceChangeListener {
+    private static final String TAG = "EthernetSettings";
+    
+    private static final String KEY_ETH_IP_ADDRESS = "ethernet_ip_addr";
+    private static final String KEY_ETH_HW_ADDRESS = "ethernet_hw_addr";
+    private static final String KEY_ETH_NET_MASK = "ethernet_netmask";
+    private static final String KEY_ETH_GATEWAY = "ethernet_gateway";
+    private static final String KEY_ETH_DNS1 = "ethernet_dns1";
+    private static final String KEY_ETH_DNS2 = "ethernet_dns2";
+    private static final String KEY_ETH_MODE= "ethernet_mode_select";
+
+    
+    private  static String mEthHwAddress = null;
+    private  static String mEthIpAddress = null;
+    private  static String mEthNetmask = null;
+    private  static String mEthGateway = null;
+    private  static String mEthdns1 = null;
+    private  static String mEthdns2 = null;
+    private final static String nullIpInfo = "0.0.0.0";
+
+    private ListPreference mkeyEthMode;
+    private SwitchPreference mEthCheckBox;
+    private CheckBoxPreference staticEthernet;
+	
+    private final IntentFilter mIntentFilter;
+    IpConfiguration mIpConfiguration;
+    EthernetManager mEthManager;
+    StaticIpConfiguration mStaticIpConfiguration;
+    Context mContext;
+    private ethernet_static_ip_dialog mDialog;
+    private static final int SHOW_RENAME_DIALOG = 0;  
+    
+    private final BroadcastReceiver mReceiver = new BroadcastReceiver() {
+	        @Override
+        public void onReceive(Context context, Intent intent) {
+            String action = intent.getAction();
+                log("Action "+action);
+                if(EthernetManager.ETHERNET_STATE_CHANGED_ACTION.equals(action)) {
+	            	/*接收到以太网状态改变的广播*/
+	            	int EtherState=intent.getIntExtra(EthernetManager.EXTRA_ETHERNET_STATE, -1);
+	            	handleEtherStateChange(EtherState);
+	        }
+	   }
+    };
+    public EthernetSettings() {
+	mIntentFilter = new IntentFilter(EthernetManager.ETHERNET_STATE_CHANGED_ACTION);
+    }
+	/*
+	 * 
+	*/
+    private void handleEtherStateChange(int EtherState ) {
+	log("curEtherState"+ EtherState);
+		
+	switch(EtherState) {
+	case EthernetManager.ETHER_STATE_DISCONNECTED:
+		mEthHwAddress = nullIpInfo;
+		mEthIpAddress = nullIpInfo;
+		mEthNetmask = nullIpInfo;
+		mEthGateway = nullIpInfo;
+		mEthdns1 = nullIpInfo;
+		mEthdns2 = nullIpInfo;	
+		break;
+	case EthernetManager.ETHER_STATE_CONNECTING:
+                String mStatusString = this.getResources().getString(R.string.ethernet_info_getting);
+                mEthHwAddress = mStatusString;
+                mEthIpAddress = mStatusString;
+                mEthNetmask = mStatusString;
+                mEthGateway = mStatusString;
+                mEthdns1 = mStatusString;
+                mEthdns2 = mStatusString;
+		break;
+	case EthernetManager.ETHER_STATE_CONNECTED:
+		getEthInfo();
+		break;
+	} 
+		
+	refreshUI();
+    }
+	
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        addPreferencesFromResource(R.xml.ethernet_settings);
+        
+        mEthManager = (EthernetManager) getSystemService(Context.ETHERNET_SERVICE);
+        
+        if (mEthManager == null) {
+		Log.e(TAG, "get ethernet manager failed");
+		return;
+	}
+	mContext=this.getActivity().getApplicationContext();
+    }
+
+    private Inet4Address getIPv4Address(String text) {
+        try {
+            return (Inet4Address) NetworkUtils.numericToInetAddress(text);
+        } catch (IllegalArgumentException|ClassCastException e) {
+            return null;
+        }
+    }
+ 
+    @Override
+    public void onResume() {
+        super.onResume();
+        if(mkeyEthMode==null) {
+            mkeyEthMode=(ListPreference)findPreference(KEY_ETH_MODE);
+            mkeyEthMode.setOnPreferenceChangeListener(this);
+        }
+        
+        if (mEthCheckBox== null) {
+            mEthCheckBox =  (SwitchPreference) findPreference("ethernet");
+        }
+        handleEtherStateChange(mEthManager.getEthernetConnectState());
+        refreshUI();
+        log("resume");
+        mContext.registerReceiver(mReceiver, mIntentFilter);
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        log("destory");
+    }
+    @Override
+    public void onStop(){
+    	super.onStop();
+    	log("stop");
+    	
+        mContext.unregisterReceiver(mReceiver);
+    }
+
+    private void setStringSummary(String preference, String value) {
+        try {
+            findPreference(preference).setSummary(value);
+        } catch (RuntimeException e) {
+            findPreference(preference).setSummary("");
+            log("can't find "+preference);
+        }
+    }
+    private String getStringFromPref(String preference) {
+        try {
+            return findPreference(preference).getSummary().toString();
+        } catch (RuntimeException e) {
+            return null;
+        }
+    }
+    private void refreshUI ( ) {
+  
+    //    setStringSummary(KEY_ETH_HW_ADDRESS,mEthHwAddress);
+  
+        setStringSummary(KEY_ETH_IP_ADDRESS, mEthIpAddress);
+        setStringSummary(KEY_ETH_NET_MASK, mEthNetmask);
+        setStringSummary(KEY_ETH_GATEWAY, mEthGateway);
+        setStringSummary(KEY_ETH_DNS1, mEthdns1);
+        setStringSummary(KEY_ETH_DNS2, mEthdns2);
+	updateCheckbox();
+    }
+    
+    private void updateCheckbox(){  //add by ljh for adding a checkbox switch
+    /*	
+        if(mEthManager==null){
+        	((CheckBoxPreference)findPreference("static_ethernet")).setChecked(false);
+        	((CheckBoxPreference)findPreference("dhcp_ethernet")).setChecked(false);
+        }else{
+        	boolean useDhcp=(mEthManager.getConfiguration().ipAssignment == IpAssignment.DHCP) ? true : false;
+        	((CheckBoxPreference)findPreference("static_ethernet")).setChecked(!useDhcp);
+        	((CheckBoxPreference)findPreference("dhcp_ethernet")).setChecked(useDhcp);
+        }
+      */  
+         
+        if(mEthManager==null){   	
+        	mkeyEthMode.setSummary("null");
+        } else {
+        	boolean useDhcp=(mEthManager.getConfiguration().ipAssignment == IpAssignment.DHCP) ? true : false;
+        	if(useDhcp){
+        		mkeyEthMode.setValue("DHCP");
+        		mkeyEthMode.setSummary(R.string.usedhcp);
+        	}else {
+        		mkeyEthMode.setValue("StaticIP");
+        		mkeyEthMode.setSummary(R.string.usestatic);
+        	}
+                int isEnable = mEthManager.getEthernetIfaceState();
+                if(isEnable == EthernetManager.ETHER_IFACE_STATE_UP) {
+                   mEthCheckBox.setChecked(true);   
+                }else mEthCheckBox.setChecked(false);
+        }    
+    }
+    @Override
+    public boolean onPreferenceChange(Preference preference, Object newValue) {
+   // 	 log("onPreferenceTreeclick");
+    	if(preference==mkeyEthMode) {
+    	     String value=(String)newValue;
+    	     if(value.equals("DHCP")){
+    	        	mEthManager.setConfiguration(new IpConfiguration(IpAssignment.DHCP, ProxySettings.NONE,null,null));
+    	        	log("switch to dhcp");
+    	     }else if(value.equals("StaticIP")){
+    	        	log("static editor");       	
+    	        	this.showDialog(SHOW_RENAME_DIALOG);
+    	     }
+    		
+    	}
+    	return true;
+    }
+    @Override
+    public boolean onPreferenceTreeClick(PreferenceScreen screen, Preference preference) {
+    	
+        if (preference == mEthCheckBox) {
+            boolean newState = mEthCheckBox.isChecked();
+            if(newState) {
+                log("turn on Ethernet");
+                mEthManager.setEthernetEnabled(true);   
+            } else {
+                log("turn off Ethernet");
+                mEthManager.setEthernetEnabled(false);
+            }
+            //log("IpAssignment: "+mEthManager.getConfiguration().toString());
+        }
+       /* else if(preference ==  (CheckBoxPreference) findPreference("dhcp_ethernet")) {//config dhcp
+        	mEthManager.setConfiguration(new IpConfiguration(IpAssignment.DHCP, ProxySettings.NONE,null,null));
+        	log("switch to dhcp");
+       } else if (preference ==  (CheckBoxPreference) findPreference("static_ethernet")) { //config static ip
+        	log("static editor");       	
+        	this.showDialog(SHOW_RENAME_DIALOG);
+       }*/
+        return super.onPreferenceTreeClick(screen, preference);
+    } 
+    
+  //将子网掩码转换成ip子网掩码形式，比如输入32输出为255.255.255.255  
+    public  String interMask2String(int prefixLength) {
+        String netMask = null;
+		int inetMask = prefixLength;
+		
+		int part = inetMask / 8;
+		int remainder = inetMask % 8;
+		int sum = 0;
+		
+		for (int i = 8; i > 8 - remainder; i--) {
+			sum = sum + (int) Math.pow(2, i - 1);
+		}
+		
+		if (part == 0) {
+			netMask = sum + ".0.0.0";
+		} else if (part == 1) {
+			netMask = "255." + sum + ".0.0";
+		} else if (part == 2) {
+			netMask = "255.255." + sum + ".0";
+		} else if (part == 3) {
+			netMask = "255.255.255." + sum;
+		} else if (part == 4) {
+			netMask = "255.255.255.255";
+		}
+
+		return netMask;
+	}
+
+    /*
+     * convert subMask string to prefix length
+     */
+    private int maskStr2InetMask(String maskStr) {
+    	StringBuffer sb ;
+    	String str;
+    	int inetmask = 0; 
+    	int count = 0;
+    	/*
+    	 * check the subMask format
+    	 */
+      	Pattern pattern = Pattern.compile("(^((\\d|[01]?\\d\\d|2[0-4]\\d|25[0-5])\\.){3}(\\d|[01]?\\d\\d|2[0-4]\\d|25[0-5])$)|^(\\d|[1-2]\\d|3[0-2])$");
+    	if (pattern.matcher(maskStr).matches() == false) {
+    		Log.e(TAG,"subMask is error");
+    		return 0;
+    	}
+    	
+    	String[] ipSegment = maskStr.split("\\.");
+    	for(int n =0; n<ipSegment.length;n++) {
+    		sb = new StringBuffer(Integer.toBinaryString(Integer.parseInt(ipSegment[n])));
+    		str = sb.reverse().toString();
+    		count=0;
+    		for(int i=0; i<str.length();i++) {
+    			i=str.indexOf("1",i);
+    			if(i==-1)  
+    				break;
+    			count++;
+    		}
+    		inetmask+=count;
+    	}
+    	return inetmask;
+    }
+
+    private boolean setStaticIpConfiguration() {
+    	
+        mStaticIpConfiguration =new StaticIpConfiguration();
+		 /*
+		  * get ip address, netmask,dns ,gw etc.
+		  */	 
+        Inet4Address inetAddr = getIPv4Address(this.mEthIpAddress);
+        int prefixLength = maskStr2InetMask(this.mEthNetmask); 
+        InetAddress gatewayAddr =getIPv4Address(this.mEthGateway); 
+        InetAddress dnsAddr = getIPv4Address(this.mEthdns1);
+		 
+        if (inetAddr.getAddress().toString().isEmpty() || prefixLength ==0 || gatewayAddr.toString().isEmpty()
+		  || dnsAddr.toString().isEmpty()) {
+              log("ip,mask or dnsAddr is wrong");
+			  return false;
+	}
+		  
+        String dnsStr2=this.mEthdns2;  
+        mStaticIpConfiguration.ipAddress = new LinkAddress(inetAddr, prefixLength);
+        mStaticIpConfiguration.gateway=gatewayAddr;
+        mStaticIpConfiguration.dnsServers.add(dnsAddr);
+  
+        if (!dnsStr2.isEmpty()) {
+            mStaticIpConfiguration.dnsServers.add(getIPv4Address(dnsStr2));
+	} 
+	mIpConfiguration=new IpConfiguration(IpAssignment.STATIC, ProxySettings.NONE,mStaticIpConfiguration,null);  
+        return true;
+    }
+
+    public void getEthInfoFromDhcp(){	
+	String tempIpInfo;
+	String iface = "eth0";
+		
+	tempIpInfo = SystemProperties.get("dhcp."+ iface +".ipaddress");
+
+	if ((tempIpInfo != null) && (!tempIpInfo.equals("")) ){ 
+		mEthIpAddress = tempIpInfo;
+    	} else {  
+    		mEthIpAddress = nullIpInfo;
+    	}
+				
+	tempIpInfo = SystemProperties.get("dhcp."+ iface +".mask");	
+	if ((tempIpInfo != null) && (!tempIpInfo.equals("")) ){
+            mEthNetmask = tempIpInfo;
+    	} else {           		
+    		mEthNetmask = nullIpInfo;
+    	}
+					
+	tempIpInfo = SystemProperties.get("dhcp."+ iface +".gateway");	
+	if ((tempIpInfo != null) && (!tempIpInfo.equals(""))){
+        	mEthGateway = tempIpInfo;
+    	} else {
+    		mEthGateway = nullIpInfo;        		
+    	}
+
+	tempIpInfo = SystemProperties.get("dhcp."+ iface +".dns1");
+	if ((tempIpInfo != null) && (!tempIpInfo.equals(""))){
+       		mEthdns1 = tempIpInfo;
+    	} else {
+    		mEthdns1 = nullIpInfo;      		
+    	}
+
+	tempIpInfo = SystemProperties.get("dhcp."+ iface +".dns2");
+	if ((tempIpInfo != null) && (!tempIpInfo.equals(""))){
+       		mEthdns2 = tempIpInfo;
+    	} else {
+    		mEthdns2 = nullIpInfo;       		
+    	}
+    }
+
+    public void getEthInfoFromStaticIp() {
+	StaticIpConfiguration staticIpConfiguration=mEthManager.getConfiguration().getStaticIpConfiguration();
+		
+	if(staticIpConfiguration == null) {
+		return ;
+	}
+	LinkAddress ipAddress = staticIpConfiguration.ipAddress;
+	InetAddress gateway   = staticIpConfiguration.gateway;
+	ArrayList<InetAddress> dnsServers=staticIpConfiguration.dnsServers;
+	
+	if( ipAddress !=null) {
+		mEthIpAddress=ipAddress.getAddress().getHostAddress();
+		mEthNetmask=interMask2String(ipAddress.getPrefixLength());
+	}
+	if(gateway !=null) {
+		mEthGateway=gateway.getHostAddress();
+	}
+		mEthdns1=dnsServers.get(0).getHostAddress();
+	
+	if(dnsServers.size() > 1) { /* 只保留两个*/
+		mEthdns2=dnsServers.get(1).getHostAddress();
+	}		
+   }
+	/*
+	 * TODO:
+	 */
+    public void getEthInfo(){
+		/*
+		mEthHwAddress = mEthManager.getEthernetHwaddr(mEthManager.getEthernetIfaceName());
+		if (mEthHwAddress == null) mEthHwAddress = nullIpInfo;
+		*/
+        IpAssignment mode =mEthManager.getConfiguration().getIpAssignment();
+        
+	   
+         if ( mode== IpAssignment.DHCP) {
+	   /*
+	    * getEth from dhcp
+	   */
+            getEthInfoFromDhcp();
+	} else if(mode == IpAssignment.STATIC) {
+	   /*
+	    * TODO: get static IP
+	   */
+            getEthInfoFromStaticIp();
+	}     
+    }
+
+    /*
+     * tools
+    */
+    private void log(String s) {
+        Log.d(TAG, s);
+    }
+    
+    @Override
+    public void onClick(DialogInterface dialogInterface, int button) {
+    	if(button==ethernet_static_ip_dialog.BUTTON_SUBMIT) {
+    	mDialog.saveIpSettingInfo(); //从Dialog获取静态数据  	
+    	if(setStaticIpConfiguration()) {
+            mEthManager.setConfiguration(mIpConfiguration); 	
+    	} else {
+            Log.e(TAG, mIpConfiguration.toString());
+    	}
+    	}
+    	updateCheckbox();
+    }
+
+    @Override
+    public Dialog onCreateDialog(int dialogId) {
+    	log("onCreateDialog "+dialogId);
+    	switch(dialogId) {
+    	case SHOW_RENAME_DIALOG:	
+  
+        	mDialog = new ethernet_static_ip_dialog(getActivity(), false, this,mGetStaticIpInfo);
+        	return mDialog;
+    	}
+    	return super.onCreateDialog(dialogId);
+    }
+    /*interface*/
+    
+    public getStaticIpInfo mGetStaticIpInfo =new getStaticIpInfo() {
+    	
+    	public boolean getStaticIp(String ipAddr) {    		
+    		mEthIpAddress = ipAddr;
+    		
+    		log("ipAddr: "+ipAddr);
+    		return true;
+    	}
+    	public boolean getStaticNetMask(String netMask) {
+    		mEthNetmask =netMask ;
+    		
+    		log("netMask: "+netMask);
+    		return true;
+    	}
+    	public boolean getStaticGateway(String gateway) {
+    		mEthGateway=gateway;
+    		
+    		log("gateway: "+gateway);
+    		return true;
+    	}
+    	public boolean getStaticDns1(String dns1) {
+    		mEthdns1=dns1;
+    		
+    		log("dns1: "+dns1);
+    		return true;
+    	}
+    	public boolean getStaticDns2(String dns2) {
+    		mEthdns2=dns2;
+    		
+    		log("dns2: "+dns2);
+    		return true;
+    	}
+    };
+
+    @Override
+    protected int getMetricsCategory() {
+        return MetricsLogger.ETHERNET;
+    }
+   
+}
diff --git a/src/com/android/settings/etherent_static_ip_dialog.java b/src/com/android/settings/etherent_static_ip_dialog.java
new file mode 100755
index 0000000..1c0ca27
--- /dev/null
+++ b/src/com/android/settings/etherent_static_ip_dialog.java
@@ -0,0 +1,265 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.android.settings;
+
+import java.net.Inet4Address;
+import java.net.InetAddress;
+
+import android.net.NetworkUtils;
+
+import com.android.settings.R;
+
+import java.util.regex.Pattern;
+
+import android.content.Context;
+import android.preference.EditTextPreference;
+import android.provider.Settings.System;
+import android.app.AlertDialog;
+import android.content.ContentResolver;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.os.Bundle;
+import android.provider.Settings.System;
+import android.text.Editable;
+import android.text.TextUtils;
+import android.text.TextWatcher;
+import android.util.Log;
+import android.view.View;
+import android.widget.EditText;
+import android.widget.TextView;
+import android.widget.Button;
+
+class ethernet_static_ip_dialog extends AlertDialog implements TextWatcher {
+	
+	public getStaticIpInfo mGetStaticInfo; 
+	private TextView mIpAddressView;
+	private TextView mIPgateway;
+	private TextView ipnetmask;
+	private TextView mdns1;
+	private TextView mdns2;
+
+	public EditText ip_address;
+	public EditText ip_gateway;
+	public EditText gateway;
+	public EditText dns1;
+	public EditText dns2;
+
+	static final int BUTTON_SUBMIT = DialogInterface.BUTTON_POSITIVE;
+	static final int BUTTON_FORGET = DialogInterface.BUTTON_NEUTRAL;
+
+	// private final boolean mEdit;
+	private final DialogInterface.OnClickListener mListener;
+
+	private View mView;
+	Context mcontext;
+
+	// private boolean mHideSubmitButton;
+
+	public ethernet_static_ip_dialog(Context context, boolean cancelable,
+			DialogInterface.OnClickListener listener,getStaticIpInfo GetgetStaticIpInfo) {
+		super(context);
+		mcontext = context;
+		mListener = listener;
+		mGetStaticInfo=GetgetStaticIpInfo;
+		// TODO Auto-generated constructor stub
+	}
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		mView = getLayoutInflater().inflate(R.layout.static_ip_dialog, null);
+		setView(mView);
+		setInverseBackgroundForced(true);
+
+		mIpAddressView = (TextView) mView.findViewById(R.id.ipaddress);
+		ipnetmask = (TextView) mView.findViewById(R.id.network_prefix_length);
+		mIPgateway = (TextView) mView.findViewById(R.id.gateway);
+		mdns1 = (TextView) mView.findViewById(R.id.dns1);
+		mdns2 = (TextView) mView.findViewById(R.id.dns2);
+
+		mIpAddressView.addTextChangedListener(this);
+		ipnetmask.addTextChangedListener(this);
+		mIPgateway.addTextChangedListener(this);
+		mdns1.addTextChangedListener(this);
+		mdns2.addTextChangedListener(this);
+
+		setButton(BUTTON_SUBMIT, mcontext.getString(R.string.ethernet_connect), mListener);
+		setButton(BUTTON_NEGATIVE,mcontext.getString(R.string.ethernet_cancel), mListener);
+		setTitle(mcontext.getString(R.string.ethernet_settings));
+
+		super.onCreate(savedInstanceState);
+	}
+
+	@Override
+	public void onStart() {
+		super.onStart();
+		updateIpSettingsInfo();
+		checkIPValue();
+	}
+	private void updateIpSettingsInfo() {
+		Log.d("blb", "Static IP status updateIpSettingsInfo");
+		ContentResolver contentResolver = mcontext.getContentResolver();
+		String staticip = System.getString(contentResolver,
+				System.ETHERNET_STATIC_IP);
+		if (!TextUtils.isEmpty(staticip))
+			mIpAddressView.setText(staticip);
+
+		String ipmask = System.getString(contentResolver,
+				System.ETHERNET_STATIC_NETMASK);
+		if (!TextUtils.isEmpty(ipmask))
+			ipnetmask.setText(ipmask);
+
+		String gateway = System.getString(contentResolver,
+				System.ETHERNET_STATIC_GATEWAY);
+		if (!TextUtils.isEmpty(gateway))
+			mIPgateway.setText(gateway);
+
+		String dns1 = System.getString(contentResolver,
+				System.ETHERNET_STATIC_DNS1);
+		if (!TextUtils.isEmpty(dns1))
+			mdns1.setText(dns1);
+
+		String dns2 = System.getString(contentResolver,
+				System.ETHERNET_STATIC_DNS2);
+		if (!TextUtils.isEmpty(dns2))
+			mdns2.setText(dns2);
+	}
+
+	public void saveIpSettingInfo() {
+		ContentResolver contentResolver = mcontext.getContentResolver();
+		String ipAddr = mIpAddressView.getText().toString();
+		String gateway = mIPgateway.getText().toString();
+		String netMask =ipnetmask.getText().toString();
+		String dns1 = mdns1.getText().toString();
+		String dns2 = mdns2.getText().toString();
+		int network_prefix_length = 24;// Integer.parseInt(ipnetmask.getText().toString());
+		if (!TextUtils.isEmpty(ipAddr)) { // not empty
+			System.putString(contentResolver, System.ETHERNET_STATIC_IP, ipAddr);
+		} else {
+			System.putString(contentResolver, System.ETHERNET_STATIC_IP, null);
+		}
+		if (!TextUtils.isEmpty(gateway)) { // not empty
+			System.putString(contentResolver, System.ETHERNET_STATIC_GATEWAY,
+					gateway);
+		} else {
+			System.putString(contentResolver, System.ETHERNET_STATIC_GATEWAY,
+					null);
+		}
+		if (!TextUtils.isEmpty(netMask)) { // not empty
+			System.putString(contentResolver, System.ETHERNET_STATIC_NETMASK,
+					netMask);
+		} else {
+			System.putString(contentResolver, System.ETHERNET_STATIC_NETMASK,
+					null);
+		}
+		if (!TextUtils.isEmpty(dns1)) { // not empty
+			System.putString(contentResolver, System.ETHERNET_STATIC_DNS1, dns1);
+		} else {
+			System.putString(contentResolver, System.ETHERNET_STATIC_DNS1, null);
+		}
+		if (!TextUtils.isEmpty(dns2)) { // not empty
+			System.putString(contentResolver, System.ETHERNET_STATIC_DNS2, dns2);
+		} else {
+			System.putString(contentResolver, System.ETHERNET_STATIC_DNS2, null);
+		}
+		/*
+		 * 回调传给EthernetSetting
+		 */
+		mGetStaticInfo.getStaticIp(ipAddr);
+		mGetStaticInfo.getStaticNetMask(netMask);
+		mGetStaticInfo.getStaticGateway(gateway);
+		mGetStaticInfo.getStaticDns1(dns1);
+		mGetStaticInfo.getStaticDns2(dns2);
+	}
+
+	/*
+	 * 返回 指定的 String 是否是 有效的 IP 地址.
+	 */
+	private boolean isValidIpAddress(String value) {
+		int start = 0;
+		int end = value.indexOf('.');
+		int numBlocks = 0;
+
+		while (start < value.length()) {
+
+			if (-1 == end) {
+				end = value.length();
+			}
+
+			try {
+				int block = Integer.parseInt(value.substring(start, end));
+				if ((block > 255) || (block < 0)) {
+					Log.w("EthernetIP",
+							"isValidIpAddress() : invalid 'block', block = "
+									+ block);
+					return false;
+				}
+			} catch (NumberFormatException e) {
+				Log.w("EthernetIP", "isValidIpAddress() : e = " + e);
+				return false;
+			}
+
+			numBlocks++;
+
+			start = end + 1;
+			end = value.indexOf('.', start);
+		}
+		return numBlocks == 4;
+	}
+    public void checkIPValue()
+    {
+
+		boolean enable = false;
+		String ipAddr = mIpAddressView.getText().toString();
+		String gateway = mIPgateway.getText().toString();
+		String dns1 = mdns1.getText().toString();
+		String dns2 = mdns2.getText().toString();
+		String  netMask = ipnetmask.getText().toString();
+     	Pattern pattern = Pattern.compile("(^((\\d|[01]?\\d\\d|2[0-4]\\d|25[0-5])\\.){3}(\\d|[01]?\\d\\d|2[0-4]\\d|25[0-5])$)|^(\\d|[1-2]\\d|3[0-2])$"); /*check subnet mask*/   	
+		if (isValidIpAddress(ipAddr) && isValidIpAddress(gateway)
+				&& isValidIpAddress(dns1) && (pattern.matcher(netMask).matches())) {
+			if (TextUtils.isEmpty(dns2)) { // 为空可以不考虑
+				enable = true;
+			} else {
+				if (isValidIpAddress(dns2)) {
+					enable = true;
+				} else {
+					enable = false;
+				}
+			}
+		} else {
+			enable = false;
+		}
+		getButton(BUTTON_SUBMIT).setEnabled(enable);
+
+    }
+	@Override
+	public void afterTextChanged(Editable s) {
+		checkIPValue();
+	//	Log.d("blb", "afterTextChanged");
+	}
+
+	@Override
+	public void beforeTextChanged(CharSequence s, int start, int count,
+			int after) {
+		// work done in afterTextChanged
+	}
+
+	@Override
+	public void onTextChanged(CharSequence s, int start, int before, int count) {
+		// work done in afterTextChanged
+	}
+
+}
diff --git a/src/com/android/settings/getStaticIpInfo.java b/src/com/android/settings/getStaticIpInfo.java
new file mode 100755
index 0000000..282c6cc
--- /dev/null
+++ b/src/com/android/settings/getStaticIpInfo.java
@@ -0,0 +1,9 @@
+package com.android.settings;
+
+public interface getStaticIpInfo {
+	public boolean getStaticIp(String ipAddr);
+	public boolean getStaticNetMask(String netMask);
+	public boolean getStaticGateway(String gateway);
+	public boolean getStaticDns1(String dns1);
+	public boolean getStaticDns2(String dns2);
+}
-- 
1.9.1

